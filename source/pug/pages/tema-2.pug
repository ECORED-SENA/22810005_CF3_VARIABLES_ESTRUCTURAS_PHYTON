.container#tema_2

    .header-ecored
        h1 2. Condicionales anidadas   

    .jumbotron.bg-white 
      .row.justify-content-center

        .col-12.col-lg-6.my-5
          img(src="assets/images/pages/tema_2/img_2_01.svg", alt="", style="width:100%")  

        .col-12
          p.mb-0 En algunas ocasiones se requiere que después de una condicional se incluya una segunda condicional o quizás una tercera condicional. A continuación se detallará la sintaxis para codificar varias condicionales anidadas en un solo bloque.                 
              

    .jumbotron.bg-white     
      .row
        .col-12
          .header-ecored.mt-3#tema2_1
            h2 2.1 Concepto
      
      .row.justify-content-center
        .col-12
          p Cervantes (2017) afirma que una sentencia condicional es anidada, si se observa que el bloque de código verdadero o el bloque de código falso, contiene otra sentencia condicional.

        .col-12.d-flex.justify-content-center.my-5
          img(src="assets/images/pages/tema_2/img_2_1_01.svg", alt="")
        
        .col-12
          .console.mb-5
            p.cl-gray Ejemplo:
            p.cl-green curso1="Requerimientos"
            p.cl-green.mb-5 curso2="Algoritmos"
            p.cl-green print("El curso1 es: ", curso1)
            p.cl-green print("El curso2 es: ", curso2)
            p.cl-green if curso1 == "Requerimientos":
            p.cl-green.indent_01 if curso2 == "Algoritmos":
            p.cl-green.indent_02 print ("Usted estudia Programación de Software")
            p.cl-green.indent_01 else:
            p.cl-green.indent_02 print ("Usted estudia otro programa diferente a Programación de Software")
            p.cl-green print ("*****    Final del Análisis del Programa de Formación SENA   *****")

        .col-12
          p La ejecución de este programa sería la siguiente:

        .col-12.my-5
          .console
            p El curso 1 es: Requerimientos
            p El curso 2 es: Algoritmos
            p Usted estudia Programación de Software
            p.mb-0 *****    Final del Análisis del Programa de Formación SENA   *****

        .col-12
          .jumbotron.mb-0
            p Aquí se observa una sentencia condicional anidada. La primera instrucción #[strong #[i if]] contiene otra sentencia #[strong #[i if]]. Es valioso aplicar la indentación interna del código para que este sea legible y funcione correctamente.


    .jumbotron.bg-white     
      .row
        .col-12
          .header-ecored.mt-3#tema2_1
            h2 2.1 Uso de ELIF
      
      .row.justify-content-center
        .col-12
          p Existen también las llamadas #[strong Condicionales encadenadas].  A veces hay más de dos posibilidades y necesitamos más de dos ramificaciones. Una forma de expresarlo es con una condicional encadenada, donde solo se puede cumplir una de las ramificaciones o ninguna de ellas.

          p.mb-0 La sentencia #[strong elif] es una abreviatura de #[strong #[i “else if”]]. No existe un límite definido al uso de sentencias #[strong elif], pero sólo se permite una sentencia else (que es opcional) y debe ser la última rama de la sentencia:

        .col-12.my-5
          .console
            p.cl-green if (condición1):
            p.cl-green.indent_01 bloque de instrucciones para ‘Verdadero’ a la condición1
            p.cl-green elif condición2:
            p.cl-green.indent_01 bloque de instrucciones para ‘Verdadero’ a la condición2
            p.cl-green elif condición3:
            p.cl-green.indent_01 bloque de instrucciones para ‘Verdadero’ a la condición3
            p.cl-green else:
            p.cl-green.indent_01 hacer esto solo para ‘Falso’ a todas las condiciones anteriores
            p.cl-green.indent_01 bloque de instrucciones
            p.cl-green Siguiente instrucción después de la condicional
            p.cl-green.mb-0 bloque de instrucciones

        .col-12
          p.mb-0 Aquí se presenta una aplicación de #[strong elif]:

        .col-12.my-5
          .console
            p.cl-gray Ejemplo:
            p.cl-green voto= int(input(" \n digite su número de candidato (1=X  2=Y  3=Z) "))
            p.cl-green if voto==1 :
            p.cl-green.indent_01 print (" \n su voto es para el candidato X " )
            p.cl-green elif voto==2 :
            p.cl-green.indent_01 print (" \n su voto es para el candidato Y " )
            p.cl-green elif voto==3 :
            p.cl-green.indent_01 print (" \n su voto es para el candidato Z " )
            p.cl-green else:
            p.cl-green.indent_01 print ("su voto es inválido.")
            p.cl-green print (" \n Ya ha depositado su voto, puede solicitar su documento y salir. Gracias")

        .col-12
          p.mb-0 El resultado del anterior programa es:

        .col-12.my-5
          .console
            p digite su número de candidato (1=X 2=Y 3=Z)
            p su voto es para el candidato Z
            p Ya ha depositado su voto, puede solicitar su documento y salir. Gracias.

        .col-12
          p.mb-0 Las condiciones se comprueban en orden. Si la primera es falsa, se comprueba la siguiente, y así se sigue con las demás. Si una de ellas es cierta, se ejecuta la rama correspondiente y termina la sentencia. Incluso, si es cierta más de una condición, sólo se ejecuta la primera rama verdadera. 

        .hr-divider.my-5

        .col-12.mb-4
          .list
            .list__item
              .list__item__icon
                img(src="assets/images/icons/icon_duoble_chevron.svg", alt="")
            .list__txt
              h3 Expresiones booleanas compuestas: 
            
        .col-12
          p Fernández (2017) menciona que es posible tener más de una expresión booleana en la misma sentencia condicional. A esto se le llaman expresiones booleanas compuestas.

          p Un ejemplo: hallar el número más pequeño entre tres números enteros. 

          p Se observa que el primer test es una expresión booleana compuesta. Todos los operandos tienen que ser ciertos para que la siguiente instrucción se ejecute.

        .col-12.my-5
          .console
            p.cl-gray Ejemplo:
            p.cl-green a= int(input("Digita el primer numero entero "))
            p.cl-green b= int(input("Digita el segundo numero entero "))
            p.cl-green c= int(input("Digita el tercer numero entero "))
            p.cl-green if a < b and a < c:
            p.cl-green.indent_01 print ("El menor numero entero es ", a)
            p.cl-green elif b < c:
            p.cl-green.indent_01 print ("El menor numero entero es ", b)
            p.cl-green else:
            p.cl-green.indent_01 print ("El menor numero entero es ", c) 
            p.cl-green print (" ******* END *************")

        .col-12
          p.mb-0 La ejecución del programa da como resultado:

        .col-12.mt-5
          .console
            p Digita el primer número entero 7
            p Digita el segundo número entero 3
            p Digital el tercer número entero 9
            p El menor número entero es 3
            p.mb-0 ******* END *************


              


